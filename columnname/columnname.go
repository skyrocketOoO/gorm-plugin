package columnname

import (
	"fmt"
	"strings"

	"github.com/skyrocketOoO/gormx/utils"

	"gorm.io/gorm"
)

func getColumns(db *gorm.DB, tableName string) (columns []string, err error) {
	// Use Migrator to get column types
	columnTypes, err := db.Migrator().ColumnTypes(tableName)
	if err != nil {
		return nil, err
	}

	// Extract column names
	for _, columnType := range columnTypes {
		columns = append(columns, columnType.Name())
	}
	return columns, nil
}

func GenTableColumnNamesCode(db *gorm.DB, tableNames []string, path string) error {
	code := "// Code generated by gorm-enhance-plugin. DO NOT EDIT.\n\n"
	code += "package col\n\n"
	for _, tableName := range tableNames {
		columns, err := getColumns(db, tableName)
		if err != nil {
			return err
		}

		code += fmt.Sprintf("var %s = struct {\n", ToCamel(tableName))
		for _, column := range columns {
			code += fmt.Sprintf(
				"\t%s %s\n",
				ToCamel(column),
				"string",
			)
		}
		code += "}{\n"
		for _, column := range columns {
			code += fmt.Sprintf(
				"\t%s: \"%s\",\n",
				ToCamel(column),
				ToCamel(column),
			)
		}
		code += "}\n\n"
	}

	err := utils.CreateOrReplaceFile(path, code)
	if err != nil {
		return err
	}
	return nil
}

func ToCamel(input string) string {
	// Split the string by underscores
	words := strings.Split(input, "_")
	if len(words) == 0 {
		return input
	}
	for i := range words {
		words[i] = strings.ToUpper(string(words[i][0])) + words[i][1:]
	}
	// Join the capitalized words
	return strings.Join(words, "")
}
